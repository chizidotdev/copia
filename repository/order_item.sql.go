// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order_item.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  order_id, product_id, store_id, status, quantity, unit_price, subtotal
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, order_id, product_id, store_id, status, quantity, unit_price, subtotal
`

type CreateOrderItemParams struct {
	OrderID   uuid.UUID   `json:"orderId"`
	ProductID uuid.UUID   `json:"productId"`
	StoreID   uuid.UUID   `json:"storeId"`
	Status    OrderStatus `json:"status"`
	Quantity  int32       `json:"quantity"`
	UnitPrice float64     `json:"unitPrice"`
	Subtotal  float64     `json:"subtotal"`
}

// Create a new order item
func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.StoreID,
		arg.Status,
		arg.Quantity,
		arg.UnitPrice,
		arg.Subtotal,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.StoreID,
		&i.Status,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :one
DELETE FROM order_items
WHERE id = $1
RETURNING id, order_id, product_id, store_id, status, quantity, unit_price, subtotal
`

// Delete an order item by ID
func (q *Queries) DeleteOrderItem(ctx context.Context, id uuid.UUID) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, deleteOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.StoreID,
		&i.Status,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
	)
	return i, err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT id, order_id, product_id, store_id, status, quantity, unit_price, subtotal FROM order_items
WHERE id = $1 LIMIT 1
`

// Get an order item by ID
func (q *Queries) GetOrderItem(ctx context.Context, id uuid.UUID) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.StoreID,
		&i.Status,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
	)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT oi.id, oi.order_id, oi.product_id, oi.store_id, oi.status, oi.quantity, oi.unit_price, oi.subtotal ,
  p.title AS product_title
FROM order_items oi
JOIN products p ON oi.product_id = p.id
WHERE oi.order_id = $1
ORDER BY oi.order_id, oi.product_id
`

type ListOrderItemsRow struct {
	ID           uuid.UUID   `json:"id"`
	OrderID      uuid.UUID   `json:"orderId"`
	ProductID    uuid.UUID   `json:"productId"`
	StoreID      uuid.UUID   `json:"storeId"`
	Status       OrderStatus `json:"status"`
	Quantity     int32       `json:"quantity"`
	UnitPrice    float64     `json:"unitPrice"`
	Subtotal     float64     `json:"subtotal"`
	ProductTitle string      `json:"productTitle"`
}

// List all order items for an order
func (q *Queries) ListOrderItems(ctx context.Context, orderID uuid.UUID) ([]ListOrderItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrderItemsRow{}
	for rows.Next() {
		var i ListOrderItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.StoreID,
			&i.Status,
			&i.Quantity,
			&i.UnitPrice,
			&i.Subtotal,
			&i.ProductTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStoreOrderItems = `-- name: ListStoreOrderItems :many
SELECT oi.id, oi.order_id, oi.product_id, oi.store_id, oi.status, oi.quantity, oi.unit_price, oi.subtotal,
  p.title AS product_title, 
  o.order_date AS order_date,
  o.payment_status AS payment_status,
  o.shipping_address AS shipping_address
FROM order_items oi
JOIN products p ON oi.product_id = p.id
JOIN orders o ON oi.order_id = o.id
WHERE oi.store_id = $1
ORDER BY o.order_date DESC
`

type ListStoreOrderItemsRow struct {
	ID              uuid.UUID     `json:"id"`
	OrderID         uuid.UUID     `json:"orderId"`
	ProductID       uuid.UUID     `json:"productId"`
	StoreID         uuid.UUID     `json:"storeId"`
	Status          OrderStatus   `json:"status"`
	Quantity        int32         `json:"quantity"`
	UnitPrice       float64       `json:"unitPrice"`
	Subtotal        float64       `json:"subtotal"`
	ProductTitle    string        `json:"productTitle"`
	OrderDate       time.Time     `json:"orderDate"`
	PaymentStatus   PaymentStatus `json:"paymentStatus"`
	ShippingAddress string        `json:"shippingAddress"`
}

// List all order items for a store
func (q *Queries) ListStoreOrderItems(ctx context.Context, storeID uuid.UUID) ([]ListStoreOrderItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, listStoreOrderItems, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStoreOrderItemsRow{}
	for rows.Next() {
		var i ListStoreOrderItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.StoreID,
			&i.Status,
			&i.Quantity,
			&i.UnitPrice,
			&i.Subtotal,
			&i.ProductTitle,
			&i.OrderDate,
			&i.PaymentStatus,
			&i.ShippingAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_items
SET status = $3
WHERE id = $1 AND store_id = $2
RETURNING id, order_id, product_id, store_id, status, quantity, unit_price, subtotal
`

type UpdateOrderItemParams struct {
	ID      uuid.UUID   `json:"id"`
	StoreID uuid.UUID   `json:"storeId"`
	Status  OrderStatus `json:"status"`
}

// Update an order item status
func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItem, arg.ID, arg.StoreID, arg.Status)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.StoreID,
		&i.Status,
		&i.Quantity,
		&i.UnitPrice,
		&i.Subtotal,
	)
	return i, err
}

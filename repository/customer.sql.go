// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customer.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
  store_id, first_name, last_name, email, phone, address
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, store_id, first_name, last_name, email, phone, address
`

type CreateCustomerParams struct {
	StoreID   uuid.UUID `json:"store_id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
}

// Create a new customer
func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.StoreID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Address,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

// Delete a customer by ID
func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, store_id, first_name, last_name, email, phone, address FROM customers
WHERE id = $1 LIMIT 1
`

// Get a customer by ID
func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, store_id, first_name, last_name, email, phone, address FROM customers
ORDER BY store_id, first_name, last_name
`

// List all customers
func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET
  store_id = $2,
  first_name = $3,
  last_name = $4,
  email = $5,
  phone = $6,
  address = $7
WHERE id = $1
`

type UpdateCustomerParams struct {
	ID        uuid.UUID `json:"id"`
	StoreID   uuid.UUID `json:"store_id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
}

// Update a customer by ID
func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.ID,
		arg.StoreID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Address,
	)
	return err
}

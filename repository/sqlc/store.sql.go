// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: store.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
  user_id, name, description, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, name, description, created_at, updated_at
`

type CreateStoreParams struct {
	UserID      pgtype.UUID      `json:"user_id"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

// Create a new store
func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, createStore,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE id = $1
`

// Delete a store by ID
func (q *Queries) DeleteStore(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStore, id)
	return err
}

const getStore = `-- name: GetStore :one
SELECT id, user_id, name, description, created_at, updated_at FROM stores
WHERE id = $1 LIMIT 1
`

// Get a store by ID
func (q *Queries) GetStore(ctx context.Context, id pgtype.UUID) (Store, error) {
	row := q.db.QueryRow(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStores = `-- name: ListStores :many
SELECT id, user_id, name, description, created_at, updated_at FROM stores
ORDER BY name
`

// List all stores
func (q *Queries) ListStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.Query(ctx, listStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Store{}
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :exec
UPDATE stores
SET
  user_id = $2,
  name = $3,
  description = $4,
  created_at = $5,
  updated_at = $6
WHERE id = $1
`

type UpdateStoreParams struct {
	ID          pgtype.UUID      `json:"id"`
	UserID      pgtype.UUID      `json:"user_id"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

// Update a store by ID
func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) error {
	_, err := q.db.Exec(ctx, updateStore,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

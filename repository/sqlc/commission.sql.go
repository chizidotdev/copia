// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: commission.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommission = `-- name: CreateCommission :one
INSERT INTO commissions (
  order_id, user_id, commission_amount, paid_status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, order_id, user_id, commission_amount, paid_status
`

type CreateCommissionParams struct {
	OrderID          pgtype.UUID    `json:"order_id"`
	UserID           pgtype.UUID    `json:"user_id"`
	CommissionAmount pgtype.Numeric `json:"commission_amount"`
	PaidStatus       string         `json:"paid_status"`
}

// Create a new commission
func (q *Queries) CreateCommission(ctx context.Context, arg CreateCommissionParams) (Commission, error) {
	row := q.db.QueryRow(ctx, createCommission,
		arg.OrderID,
		arg.UserID,
		arg.CommissionAmount,
		arg.PaidStatus,
	)
	var i Commission
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.CommissionAmount,
		&i.PaidStatus,
	)
	return i, err
}

const deleteCommission = `-- name: DeleteCommission :exec
DELETE FROM commissions
WHERE id = $1
`

// Delete a commission by ID
func (q *Queries) DeleteCommission(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCommission, id)
	return err
}

const getCommission = `-- name: GetCommission :one
SELECT id, order_id, user_id, commission_amount, paid_status FROM commissions
WHERE id = $1 LIMIT 1
`

// Get a commission by ID
func (q *Queries) GetCommission(ctx context.Context, id pgtype.UUID) (Commission, error) {
	row := q.db.QueryRow(ctx, getCommission, id)
	var i Commission
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.CommissionAmount,
		&i.PaidStatus,
	)
	return i, err
}

const listCommissions = `-- name: ListCommissions :many
SELECT id, order_id, user_id, commission_amount, paid_status FROM commissions
ORDER BY order_id, user_id
`

// List all commissions
func (q *Queries) ListCommissions(ctx context.Context) ([]Commission, error) {
	rows, err := q.db.Query(ctx, listCommissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Commission{}
	for rows.Next() {
		var i Commission
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.CommissionAmount,
			&i.PaidStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommission = `-- name: UpdateCommission :exec
UPDATE commissions
SET
  order_id = $2,
  user_id = $3,
  commission_amount = $4,
  paid_status = $5
WHERE id = $1
`

type UpdateCommissionParams struct {
	ID               pgtype.UUID    `json:"id"`
	OrderID          pgtype.UUID    `json:"order_id"`
	UserID           pgtype.UUID    `json:"user_id"`
	CommissionAmount pgtype.Numeric `json:"commission_amount"`
	PaidStatus       string         `json:"paid_status"`
}

// Update a commission by ID
func (q *Queries) UpdateCommission(ctx context.Context, arg UpdateCommissionParams) error {
	_, err := q.db.Exec(ctx, updateCommission,
		arg.ID,
		arg.OrderID,
		arg.UserID,
		arg.CommissionAmount,
		arg.PaidStatus,
	)
	return err
}

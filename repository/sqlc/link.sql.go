// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: link.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (
  user_id, unique_link, link_type
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, unique_link, link_type
`

type CreateLinkParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	UniqueLink string      `json:"unique_link"`
	LinkType   string      `json:"link_type"`
}

// Create a new link
func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, createLink, arg.UserID, arg.UniqueLink, arg.LinkType)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UniqueLink,
		&i.LinkType,
	)
	return i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE id = $1
`

// Delete a link by ID
func (q *Queries) DeleteLink(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteLink, id)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, user_id, unique_link, link_type FROM links
WHERE id = $1 LIMIT 1
`

// Get a link by ID
func (q *Queries) GetLink(ctx context.Context, id pgtype.UUID) (Link, error) {
	row := q.db.QueryRow(ctx, getLink, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UniqueLink,
		&i.LinkType,
	)
	return i, err
}

const listLinks = `-- name: ListLinks :many
SELECT id, user_id, unique_link, link_type FROM links
ORDER BY user_id
`

// List all links
func (q *Queries) ListLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.Query(ctx, listLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UniqueLink,
			&i.LinkType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :exec
UPDATE links
SET
  user_id = $2,
  unique_link = $3,
  link_type = $4
WHERE id = $1
`

type UpdateLinkParams struct {
	ID         pgtype.UUID `json:"id"`
	UserID     pgtype.UUID `json:"user_id"`
	UniqueLink string      `json:"unique_link"`
	LinkType   string      `json:"link_type"`
}

// Update a link by ID
func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) error {
	_, err := q.db.Exec(ctx, updateLink,
		arg.ID,
		arg.UserID,
		arg.UniqueLink,
		arg.LinkType,
	)
	return err
}
